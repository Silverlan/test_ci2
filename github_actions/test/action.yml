name: Run Pragma
description: 'Run Pragma'
inputs:
  lua-code:
    description: 'Lua Code'
    required: true
    default: ''
  state:
    description: 'Set to "client" for client-side execution, otherwise "server".'
    required: true
    default: 'client'
  version:
    description: 'The version of Pragma to download (if it not already exists).'
    required: true
    default: 'nightly'
outputs:
  exit-code:
    description: 'The result of the Lua code execution'
  error-code:
    description: 'The result of the Lua code execution'
runs:
  using: "composite"
  steps:
    - name: Download Pragma
      shell: bash
      run: |
        if [ -d "pragma" ]; then
          echo "Pragma already exists. Skipping download."
        else
          repo="Silverlan/pragma"

          version="${{ inputs.version }}"

          dlUrl="https://github.com/Silverlan/pragma/releases/download/${version}/"
          if [ "$RUNNER_OS" == "Linux" ]; then
            if [ "$version" == "nightly" ]; then
              fileName="pragma-lin64.tar.gz"
            else
              fileName="pragma-${version}-lin64.tar.gz"
            fi
          else
            if [ "$version" == "nightly" ]; then
              fileName="pragma-win64.zip"
            else
              fileName="pragma-${version}-win64.zip"
            fi
          fi
          dlUrl="${dlUrl}${fileName}"

          curl -L "${dlUrl}" -o "${fileName}"
          mkdir pragma
          if [[ $fileName == *.tar.gz ]]; then
            tar -xzf ${fileName} -C pragma
          else
            unzip ${fileName} -d pragma
          fi
        fi

    - name: Copy Override Files (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Test-Path -Path "pragma_override") {
          Copy-Item -Path "pragma_override\*" -Destination "pragma" -Recurse -Force
        } else {
          echo "Override directory does not exist. Skipping copy."
        }

    - name: Write Lua Code to File
      shell: bash
      run: |
        mkdir -p pragma/lua
        scriptFileName="pragma/lua/ci_script.lua"
        echo "file.write(\"ci.txt\", \"0\")\n" > ${scriptFileName}
        echo "${{ inputs.lua-code }}" >> ${scriptFileName}
        echo "file.write(\"ci.txt\", \"1\")" >> ${scriptFileName}
        cat ${scriptFileName}

    - name: Run Test Scripts
      shell: bash
      run: |
        cd "pragma"
        if [ "$RUNNER_OS" == "Linux" ]; then
          chmod +x ./pragma
        fi
        executableName="pragma"
        luaCmdName="lua_exec"
        if [ "${{ inputs.state }}" == "client" ]; then
          luaCmdName="lua_exec_cl"
        fi
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ "${{ inputs.state }}" == "server" ]; then
            executableName="pragma_server"
          else
            executableName="pragma.com"
          fi
        elif [ "${{ inputs.state }}" == "server" ]; then
          executableName="pragma_server"
        fi
        ./${executableName} -cli -non_interactive -luaext -log 1 1 -log_file "log.txt" +map "empty" +"${luaCmdName} ci_script.lua" +"exit"

        EXIT_CODE=$?
        echo "::set-output name=exit-code::$EXIT_CODE"
        if [ $EXIT_CODE -eq 0 ]; then
          echo "::set-output name=error-code::0"
        else
          echo "::set-output name=error-code::1"
          exit 1
        fi

    - name: Delete Lua Code File
      shell: bash
      run: |
        rm pragma/lua/ci_script.lua

    - name: Check Result
      shell: bash
      run: |
        CI_CONTENTS=$(cat "pragma/ci.txt")
        if [ $exit_code -ne 0 ]; then
          echo "::set-output name=error-code::3"
          exit 3
        fi
        if [ "$CI_CONTENTS" == "0" ]; then
          echo "::set-output name=error-code::2"
          exit 2
        fi
