name: Run Pragma
description: 'Run Pragma'
inputs:
  lua-code:
    description: 'Lua Code'
    required: true
    default: ''
  state:
    description: 'Set to "client" for client-side execution, otherwise "server".'
    required: true
    default: 'client'
  version:
    description: 'The version of Pragma to download (if it not already exists).'
    required: true
    default: 'nightly'
runs:
  using: "composite"
  steps:
    - name: Download Pragma
      shell: bash
      run: |
        if [ -d "pragma" ]; then
          echo "Pragma already exists. Skipping download."
        else
          repo="Silverlan/pragma"

          version="${{ inputs.version }}"

          dlUrl="https://github.com/Silverlan/pragma/releases/download/${version}/"
          if [ "$RUNNER_OS" == "Linux" ]; then
            if [ "$version" == "nightly" ]; then
              fileName="pragma-lin64.tar.gz"
            else
              fileName="pragma-${version}-lin64.tar.gz"
            fi
          else
            if [ "$version" == "nightly" ]; then
              fileName="pragma-win64.zip"
            else
              fileName="pragma-${version}-win64.zip"
            fi
          fi
          dlUrl="${dlUrl}${fileName}"

          curl -L "${dlUrl}" -o "${fileName}"
          mkdir pragma
          if [[ $fileName == *.tar.gz ]]; then
            tar -xzf ${fileName} -C pragma
          else
            unzip ${fileName} -d pragma
          fi
        fi

    - name: Copy Override Files (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Test-Path -Path "pragma_override") {
          Copy-Item -Path "pragma_override\*" -Destination "pragma" -Recurse -Force
        } else {
          echo "Override directory does not exist. Skipping copy."
        }

    - name: Write Lua Code to File
      shell: bash
      run: |
        mkdir -p pragma/lua
        echo "${{ inputs.lua-code }}" > pragma/lua/test_script.lua
        cat pragma/lua/test_script.lua
        
    #- uses: mxschmitt/action-tmate@v3.18
    #  name: CI


    - name: Run Test Scripts
      shell: bash
      run: |
        cd "pragma"
        if [ "$RUNNER_OS" == "Linux" ]; then
          chmod +x ./pragma
        fi
        executableName="pragma"
        luaCmdName="lua_exec"
        if [ "${{ inputs.state }}" == "client" ]; then
          luaCmdName="lua_exec_cl"
        fi
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ "${{ inputs.state }}" == "server" ]; then
            executableName="pragma_server"
          else
            executableName="pragma.com"
          fi
        elif [ "${{ inputs.state }}" == "server" ]; then
          executableName="pragma_server"
        fi
        ./${executableName} -cli -non_interactive -luaext -log 1 1 -log_file "log.txt" +map "empty" +"${luaCmdName} test_script.lua" +"exit"

    #- name: Upload Crashdumps
    #  uses: actions/upload-artifact@v4
    #  if: always()
    #  with:
    #    name: crashdumps
    #    path: "pragma/crashdumps"

    #- name: Run Test Scripts
    #  shell: bash
    #  run: |
    #    cd "pragma"
    #    if [ "$RUNNER_OS" == "Linux" ]; then
    #      chmod +x ./pragma
    #    fi
    #    ./pragma -cli -luaext -log 2 2 +map "test_physics" +"lua_exec tests/ci_runner_tests.lua"
      #./pragma -cli -luaext -log 2 2 +map "empty" +"lua_run print('test')" +"lua_exec test_script.lua" +"lua_run print('test2')" +"lua_run exit"
